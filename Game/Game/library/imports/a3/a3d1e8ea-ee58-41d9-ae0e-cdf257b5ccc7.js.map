{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Script\\Tool\\System/assets\\Script\\Tool\\System\\MemoryManager.js"],"names":["outModule","local","getPixelFormatSize","pixelFormat","cc","Texture2D","PixelFormat","RGB565","RGB5A1","RGBA4444","RGB888","RGBA8888","A8","I8","AI88","getImgUseMemoryBySize","width","height","getNowSpriteUseMemory","textureArr","textureCache","getAllTextures","totleUseMemory","forEach","oneTexture","pixelWidth","pixelHeight","memoryCheck","g_MAX_MEMORY_NUM","clearMemory","g_AUTO_CLEAR_MEMORY_FLAG","prefabSave","g_PrefabManager","clearArr","allPrefabArr","canNotClearArr","key","hasOwnProperty","push","onePrefabData","i","len","prefabNodeArr","length","active","frequency","g_USE_STRONG_CLEAR_MODE","clearPrefabInStrongMode","g_SpriteFrameManager","clearDestroyNode","sort","data_1","data_2","newClearArr","judgeCanClearPrefab","clearPrefabWithoutUseSpreite","module","exports"],"mappings":"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","file":"MemoryManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Script\\Tool\\System","sourcesContent":["//内存管理模块\r\n//只管理图片内存数量，这个是大头\r\nvar outModule = {};\r\nvar local = {};\r\n\r\n/**\r\n * 更具图片格式返回一个像素所占字节\r\n * @param {*} pixelFormat \r\n */\r\nlocal.getPixelFormatSize = (pixelFormat) => {\r\n    switch (pixelFormat) {\r\n        case cc.Texture2D.PixelFormat.RGB565:\r\n            return 16;\r\n        case cc.Texture2D.PixelFormat.RGB5A1:\r\n            return 16;\r\n        case cc.Texture2D.PixelFormat.RGBA4444:\r\n            return 16;\r\n        case cc.Texture2D.PixelFormat.RGB888:\r\n            return 24;\r\n        case cc.Texture2D.PixelFormat.RGBA8888:\r\n            return 32;\r\n        case cc.Texture2D.PixelFormat.A8:\r\n            return 8;\r\n        case cc.Texture2D.PixelFormat.I8:\r\n            return 8;\r\n        case cc.Texture2D.PixelFormat.AI88:\r\n            return 16;\r\n    }\r\n    return 16;\r\n};\r\n\r\n/**\r\n * 获取一张图片所占的内存\r\n * @param {Number} width \r\n * @param {Number} height \r\n * @param {enum} pixelFormat 图片格式\r\n */\r\nlocal.getImgUseMemoryBySize = (width, height, pixelFormat) => {\r\n    return width * height * local.getPixelFormatSize(pixelFormat) / (8 * 1024 * 1024);\r\n};\r\n\r\n/**\r\n * 获取当前图片使用的内存数量\r\n * 返回的数量是MB\r\n */\r\noutModule.getNowSpriteUseMemory = () => {\r\n    let textureArr = cc.textureCache.getAllTextures();\r\n    let totleUseMemory = 0;\r\n    textureArr.forEach((oneTexture) => {\r\n        totleUseMemory = totleUseMemory + local.getImgUseMemoryBySize(oneTexture.pixelWidth, oneTexture.pixelHeight, oneTexture.pixelFormat);\r\n    });\r\n    return totleUseMemory;\r\n};\r\n\r\n/**\r\n * 检测内存情况\r\n */\r\noutModule.memoryCheck = () => {\r\n    if (outModule.getNowSpriteUseMemory() > g_MAX_MEMORY_NUM) {\r\n        outModule.clearMemory();\r\n    }\r\n};\r\n\r\n/**\r\n * 开始自动清除内存\r\n *  {\r\n        prefabPath: prefabPath,\r\n        prefab: prefab,\r\n        prefabNodeArr: [],\r\n        frequency: frequency || -1 -1表示永远不会被清除\r\n    }\r\n */\r\noutModule.clearMemory = () => {\r\n    if (!g_AUTO_CLEAR_MEMORY_FLAG) {\r\n        return;\r\n    }\r\n    let prefabSave = g_PrefabManager.prefabSave;\r\n    let clearArr = [];\r\n    let allPrefabArr = [];\r\n    //这个是不可以清除的预制体数组\r\n    let canNotClearArr = [];\r\n    for (var key in prefabSave) {\r\n        if (!prefabSave.hasOwnProperty(key) || !prefabSave[key]) {\r\n            continue;\r\n        }\r\n        allPrefabArr.push(prefabSave[key]);\r\n    }\r\n    //先排除不可清理的\r\n    allPrefabArr.forEach((onePrefabData) => {\r\n        //如果prefabNodeArr里面有一个节点的node的active是true的话就不能清除了\r\n        let i, len = onePrefabData.prefabNodeArr.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (onePrefabData.prefabNodeArr[i].active) {\r\n                canNotClearArr.push(onePrefabData);\r\n                return;\r\n            }\r\n        }\r\n        if (onePrefabData.frequency !== -1) {\r\n            clearArr.push(onePrefabData);\r\n        }\r\n    });\r\n    if (g_USE_STRONG_CLEAR_MODE) {\r\n        g_PrefabManager.clearPrefabInStrongMode(clearArr, canNotClearArr);\r\n        g_SpriteFrameManager.clearDestroyNode();\r\n        return;\r\n    }\r\n    //按frequency从小到大排序\r\n    clearArr.sort((data_1, data_2) => {\r\n        return data_1.frequency - data_2.frequency;\r\n    });\r\n    //再次判断，如果清除的prefab有依赖和canNotClearArr里面的prefab冲突，则不能被清除\r\n    while (true) {\r\n        let newClearArr = [];\r\n        clearArr.forEach((onePrefabData) => {\r\n            if (g_PrefabManager.judgeCanClearPrefab(onePrefabData, canNotClearArr)) {\r\n                newClearArr.push(onePrefabData);\r\n            }\r\n        });\r\n        if (newClearArr.length === clearArr.length) {\r\n            break;\r\n        }\r\n        clearArr = newClearArr;\r\n    }\r\n    //开始清除，剩余内存小于g_MAX_MEMORY_NUM时停止\r\n    g_PrefabManager.clearPrefabWithoutUseSpreite(clearArr);\r\n    g_SpriteFrameManager.clearDestroyNode();\r\n};\r\n\r\nmodule.exports = outModule;"]}