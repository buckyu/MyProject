{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Script\\Tool\\System/assets\\Script\\Tool\\System\\PrefabManager.js"],"names":["outModule","local","prefabSave","PREFAB_INIT_LOAD_ARR","getNodeIndexInPrefabNodeArr","prefabPath","node","len","prefabNodeArr","length","i","getLoadResPathStr","assetsPathStr","splitArr","split","getAllClearDepends","clearArr","allDepends","forEach","onePrefabData","oneNode","pathArr","g_SpriteFrameManager","getAllUINodeUseSprite","onePath","spriteDepends","cc","loader","getDependsRecursively","indexOf","push","depends","prefab","judgeCanClearPrefab","prefabData","canNotClearPrefabDataArr","dependArr","oneData","dependStr","getPrefab","clearAll","key","hasOwnProperty","clearPrefab","clearPrefabWithoutUseSpreite","destroy","_tj_isDestroy","allClearDepends","dependClearArr","loadResPathStr","spriteUseNodeArr","spriteUseNodeObj","isValid","clearSprite","release","undefined","clearPrefabInStrongMode","canNotClearArr","addPrefabNode","init","finishCb","loadedCount","pathData","loadPrefab","pathStr","error","g_LogTool","showLog","path","frequency","successCb","failCb","loadRes","Prefab","err","g_MemoryManager","memoryCheck","module","exports"],"mappings":";;;;;;AAAA;AACA;;;;AAIA,IAAIA,YAAY,EAAhB;AACA,IAAIC,QAAQ,EAAZ;;AAEA;AACA;;;;;;;;AAQAD,UAAUE,UAAV,GAAuB,EAAvB;;AAEA;AACA;;;;;;AAMA,IAAMC,uBAAuB,EAA7B;;AAIA;;;;;AAKAF,MAAMG,2BAAN,GAAoC,UAACC,UAAD,EAAaC,IAAb,EAAsB;AACtD,QAAI,CAACN,UAAUE,UAAV,CAAqBG,UAArB,CAAL,EAAuC;AACnC;AACH;AACD,QAAIE,MAAMP,UAAUE,UAAV,CAAqBG,UAArB,EAAiCG,aAAjC,CAA+CC,MAAzD;AAAA,QAAiEC,UAAjE;AACA,SAAKA,IAAI,CAAT,EAAYA,IAAIH,GAAhB,EAAqBG,GAArB,EAA0B;AACtB,YAAIV,UAAUE,UAAV,CAAqBG,UAArB,EAAiCG,aAAjC,CAA+CE,CAA/C,MAAsDJ,IAA1D,EAAgE;AAC5D,mBAAOI,CAAP;AACH;AACJ;AACJ,CAVD;;AAYA;;;;AAIAT,MAAMU,iBAAN,GAA0B,UAACC,aAAD,EAAmB;AACzC,QAAIC,iBAAJ;AACAA,eAAWD,cAAcE,KAAd,CAAoB,YAApB,CAAX;AACA,QAAID,SAASJ,MAAT,GAAkB,CAAtB,EAAyB;AACrB;AACH;AACDI,eAAWA,SAAS,CAAT,EAAYC,KAAZ,CAAkB,GAAlB,CAAX;AACA,WAAOD,SAAS,CAAT,CAAP;AACH,CARD;;AAUA;;;;AAIAZ,MAAMc,kBAAN,GAA2B,UAACC,QAAD,EAAc;AACrC,QAAIC,aAAa,EAAjB;AACAD,aAASE,OAAT,CAAiB,UAACC,aAAD,EAAmB;AAChC;AACAA,sBAAcX,aAAd,CAA4BU,OAA5B,CAAoC,UAACE,OAAD,EAAa;AAC7C,gBAAIC,UAAUC,qBAAqBC,qBAArB,CAA2CH,OAA3C,CAAd;AACAC,oBAAQH,OAAR,CAAgB,UAACM,OAAD,EAAa;AACzB,oBAAIC,gBAAgBC,GAAGC,MAAH,CAAUC,qBAAV,CAAgCJ,OAAhC,CAApB;AACAC,8BAAcP,OAAd,CAAsB,UAACN,aAAD,EAAmB;AACrC,wBAAIK,WAAWY,OAAX,CAAmBjB,aAAnB,IAAoC,CAAxC,EAA2C;AACvCK,mCAAWa,IAAX,CAAgBlB,aAAhB;AACH;AACJ,iBAJD;AAKH,aAPD;AAQH,SAVD;AAWA,YAAImB,UAAUL,GAAGC,MAAH,CAAUC,qBAAV,CAAgCT,cAAca,MAA9C,CAAd;AACAD,gBAAQb,OAAR,CAAgB,UAACN,aAAD,EAAmB;AAC/B,gBAAIK,WAAWY,OAAX,CAAmBjB,aAAnB,IAAoC,CAAxC,EAA2C;AACvCK,2BAAWa,IAAX,CAAgBlB,aAAhB;AACH;AACJ,SAJD;AAKH,KAnBD;AAoBA,WAAOK,UAAP;AACH,CAvBD;;AAyBA;;;;;AAKAjB,UAAUiC,mBAAV,GAAgC,UAACC,UAAD,EAAaC,wBAAb,EAA0C;AACtE;AACA,QAAIC,YAAY,EAAhB;AACAD,6BAAyBjB,OAAzB,CAAiC,UAACmB,OAAD,EAAa;AAC1C,YAAIN,UAAUL,GAAGC,MAAH,CAAUC,qBAAV,CAAgCS,QAAQL,MAAxC,CAAd;AACAD,gBAAQb,OAAR,CAAgB,UAACoB,SAAD,EAAe;AAC3B,gBAAIF,UAAUP,OAAV,CAAkBS,SAAlB,IAA+B,CAAnC,EAAsC;AAClCF,0BAAUN,IAAV,CAAeQ,SAAf;AACH;AACJ,SAJD;AAKH,KAPD;AAQA,QAAIP,UAAUL,GAAGC,MAAH,CAAUC,qBAAV,CAAgCM,WAAWF,MAA3C,CAAd;AACA,QAAItB,UAAJ;AAAA,QAAOH,MAAMwB,QAAQtB,MAArB;AACA,SAAKC,IAAI,CAAT,EAAYA,IAAIH,GAAhB,EAAqBG,GAArB,EAA0B;AACtB,YAAI0B,UAAUP,OAAV,CAAkBE,QAAQrB,CAAR,CAAlB,KAAiC,CAArC,EAAwC;AACpC,mBAAO,KAAP;AACH;AACJ;AACD,WAAO,IAAP;AACH,CAnBD;;AAqBA;;;;AAIAV,UAAUuC,SAAV,GAAsB,UAAClC,UAAD,EAAgB;AAClC,WAAOL,UAAUE,UAAV,CAAqBG,UAArB,EAAiC2B,MAAxC;AACH,CAFD;;AAIA;AACA;AACAhC,UAAUwC,QAAV,GAAqB,YAAM;AACvB,QAAIC,YAAJ;AACA,SAAKA,GAAL,IAAYzC,UAAUE,UAAtB,EAAkC;AAC9B,YAAI,CAACF,UAAUE,UAAV,CAAqBwC,cAArB,CAAoCD,GAApC,CAAL,EAA+C;AAC3C;AACH;AACDzC,kBAAU2C,WAAV,CAAsBF,GAAtB;AACH;AACDzC,cAAUE,UAAV,GAAuB,EAAvB;AACH,CATD;;AAWA;AACA;AACA;AACA;;;AAGAF,UAAU4C,4BAAV,GAAyC,UAAC5B,QAAD,EAAc;AACnD;AACAA,aAASE,OAAT,CAAiB,UAACC,aAAD,EAAmB;AAChCA,sBAAcX,aAAd,CAA4BU,OAA5B,CAAoC,UAAUZ,IAAV,EAAgB;AAChDA,iBAAKuC,OAAL;AACAvC,iBAAKwC,aAAL,GAAqB,IAArB;AACH,SAHD;AAIH,KALD;AAMA,QAAIC,kBAAkB9C,MAAMc,kBAAN,CAAyBC,QAAzB,CAAtB;AACA,QAAIgC,iBAAiB,EAArB;AACAD,oBAAgB7B,OAAhB,CAAwB,UAACN,aAAD,EAAmB;AACvC,YAAIqC,iBAAiBhD,MAAMU,iBAAN,CAAwBC,aAAxB,CAArB;AACA,YAAI,CAACqC,cAAD,IAAmB,CAACA,eAAexC,MAAvC,EAA+C;AAC3CuC,2BAAelB,IAAf,CAAoBlB,aAApB;AACA;AACH;AACD,YAAIsC,mBAAmB5B,qBAAqB6B,gBAArB,CAAsCF,cAAtC,CAAvB;AACA,YAAI,CAACC,gBAAL,EAAuB;AACnBF,2BAAelB,IAAf,CAAoBlB,aAApB;AACA;AACH;AACD,YAAIF,UAAJ;AAAA,YAAOH,MAAM2C,iBAAiBzC,MAA9B;AACA,aAAKC,IAAI,CAAT,EAAYA,IAAIH,GAAhB,EAAqBG,GAArB,EAA0B;AACtB,gBAAIwC,iBAAiBxC,CAAjB,KAAuBwC,iBAAiBxC,CAAjB,EAAoB0C,OAA3C,IAAsD,CAACF,iBAAiBxC,CAAjB,EAAoBoC,aAA/E,EAA8F;AAC1F;AACH,aAFD,MAEO;AACHxB,qCAAqB+B,WAArB,CAAiCJ,cAAjC;AACH;AACJ;AACDD,uBAAelB,IAAf,CAAoBlB,aAApB;AACH,KApBD;AAqBAc,OAAGC,MAAH,CAAU2B,OAAV,CAAkBN,cAAlB;AACAhC,aAASE,OAAT,CAAiB,UAACC,aAAD,EAAmB;AAChCnB,kBAAUE,UAAV,CAAqBiB,cAAcd,UAAnC,IAAiDkD,SAAjD;AACH,KAFD;AAGH,CAnCD;;AAqCA;AACA;AACA;AACA;;;;AAIAvD,UAAUwD,uBAAV,GAAoC,UAACxC,QAAD,EAAWyC,cAAX,EAA8B;AAC9D;AACA,QAAIrB,YAAY,EAAhB;AACAqB,mBAAevC,OAAf,CAAuB,UAACmB,OAAD,EAAa;AAChC,YAAIN,UAAUL,GAAGC,MAAH,CAAUC,qBAAV,CAAgCS,QAAQL,MAAxC,CAAd;AACAD,gBAAQb,OAAR,CAAgB,UAACoB,SAAD,EAAe;AAC3B,gBAAIF,UAAUP,OAAV,CAAkBS,SAAlB,IAA+B,CAAnC,EAAsC;AAClCF,0BAAUN,IAAV,CAAeQ,SAAf;AACH;AACJ,SAJD;AAKH,KAPD;AAQAtB,aAASE,OAAT,CAAiB,UAACC,aAAD,EAAmB;AAChCA,sBAAcX,aAAd,CAA4BU,OAA5B,CAAoC,UAAUZ,IAAV,EAAgB;AAChDA,iBAAKuC,OAAL;AACAvC,iBAAKwC,aAAL,GAAqB,IAArB;AACH,SAHD;AAIH,KALD;AAMA,QAAIC,kBAAkB9C,MAAMc,kBAAN,CAAyBC,QAAzB,CAAtB;AACA,QAAIgC,iBAAiB,EAArB;AACAD,oBAAgB7B,OAAhB,CAAwB,UAACN,aAAD,EAAmB;AACvC,YAAIwB,UAAUP,OAAV,CAAkBjB,aAAlB,KAAoC,CAAxC,EAA2C;AACvC;AACH;AACD,YAAIqC,iBAAiBhD,MAAMU,iBAAN,CAAwBC,aAAxB,CAArB;AACA,YAAI,CAACqC,cAAD,IAAmB,CAACA,eAAexC,MAAvC,EAA+C;AAC3CuC,2BAAelB,IAAf,CAAoBlB,aAApB;AACA;AACH;AACD,YAAIsC,mBAAmB5B,qBAAqB6B,gBAArB,CAAsCF,cAAtC,CAAvB;AACA,YAAI,CAACC,gBAAL,EAAuB;AACnBF,2BAAelB,IAAf,CAAoBlB,aAApB;AACA;AACH;AACD,YAAIF,UAAJ;AAAA,YAAOH,MAAM2C,iBAAiBzC,MAA9B;AACA,aAAKC,IAAI,CAAT,EAAYA,IAAIH,GAAhB,EAAqBG,GAArB,EAA0B;AACtB,gBAAIwC,iBAAiBxC,CAAjB,KAAuBwC,iBAAiBxC,CAAjB,EAAoB0C,OAA3C,IAAsD,CAACF,iBAAiBxC,CAAjB,EAAoBoC,aAA/E,EAA8F;AAC1F;AACH,aAFD,MAEO;AACHxB,qCAAqB+B,WAArB,CAAiCJ,cAAjC;AACH;AACJ;AACDD,uBAAelB,IAAf,CAAoBlB,aAApB;AACH,KAvBD;AAwBAc,OAAGC,MAAH,CAAU2B,OAAV,CAAkBN,cAAlB;AACAhC,aAASE,OAAT,CAAiB,UAACC,aAAD,EAAmB;AAChCnB,kBAAUE,UAAV,CAAqBiB,cAAcd,UAAnC,IAAiDkD,SAAjD;AACH,KAFD;AAGH,CA/CD;;AAiDA;AACA;AACA;;;AAGAvD,UAAU2C,WAAV,GAAwB,UAACtC,UAAD,EAAgB;AACpC,QAAI,CAACL,UAAUE,UAAV,CAAqBG,UAArB,CAAL,EAAuC;AACnC;AACH;AACD;AACAL,cAAUE,UAAV,CAAqBG,UAArB,EAAiCG,aAAjC,CAA+CU,OAA/C,CAAuD,UAAUZ,IAAV,EAAgB;AACnEA,aAAKuC,OAAL;AACAvC,aAAKwC,aAAL,GAAqB,IAArB;AACH,KAHD;AAIA,QAAIf,UAAUL,GAAGC,MAAH,CAAUC,qBAAV,CAAgC5B,UAAUE,UAAV,CAAqBG,UAArB,EAAiC2B,MAAjE,CAAd;AACAN,OAAGC,MAAH,CAAU2B,OAAV,CAAkBvB,OAAlB;AACA/B,cAAUE,UAAV,CAAqBG,UAArB,IAAmCkD,SAAnC;AACH,CAZD;;AAcA;;;;;AAKAvD,UAAU0D,aAAV,GAA0B,UAACrD,UAAD,EAAaC,IAAb,EAAsB;AAC5C,QAAI,CAACN,UAAUE,UAAV,CAAqBG,UAArB,CAAL,EAAuC;AACnC;AACH;AACD,QAAIJ,MAAMG,2BAAN,CAAkCC,UAAlC,EAA8CC,IAA9C,MAAwDiD,SAA5D,EAAuE;AACnE;AACH;AACDvD,cAAUE,UAAV,CAAqBG,UAArB,EAAiCG,aAAjC,CAA+CsB,IAA/C,CAAoDxB,IAApD;AACH,CARD;;AAUA;;;;;AAKAN,UAAU2D,IAAV,GAAiB,UAACC,QAAD,EAAc;AAC3B,QAAIC,cAAc,CAAlB;AACA;AACA,QAAIA,gBAAgB1D,qBAAqBM,MAAzC,EAAiD;AAC7C,YAAImD,QAAJ,EAAc;AACVA;AACH;AACD;AACH;AACDzD,yBAAqBe,OAArB,CAA6B,UAAC4C,QAAD,EAAc;AACvC9D,kBAAU+D,UAAV,CAAqBD,SAASE,OAA9B,EAAuC,UAAChC,MAAD,EAAY;AAC/C6B;AACA,gBAAIA,gBAAgB1D,qBAAqBM,MAAzC,EAAiD;AAC7C,oBAAImD,QAAJ,EAAc;AACVA;AACH;AACJ;AACJ,SAPD,EAOG,UAACK,KAAD,EAAW;AACVC,sBAAUC,OAAV,wCAAuDC,IAAvD,mBAAyEH,KAAzE;AACAJ;AACA,gBAAIA,gBAAgB1D,qBAAqBM,MAAzC,EAAiD;AAC7C,oBAAImD,QAAJ,EAAc;AACVA;AACH;AACJ;AACJ,SAfD,EAeGE,SAASO,SAfZ;AAgBH,KAjBD;AAkBH,CA3BD;;AA6BA;;;;;;;AAOArE,UAAU+D,UAAV,GAAuB,UAAC1D,UAAD,EAAaiE,SAAb,EAAwBC,MAAxB,EAAgCF,SAAhC,EAA8C;AACjE;AACA,QAAIrE,UAAUE,UAAV,CAAqBG,UAArB,CAAJ,EAAsC;AAClC,YAAIiE,SAAJ,EAAe;AACXA,sBAAUtE,UAAUE,UAAV,CAAqBG,UAArB,CAAV;AACH;AACD;AACH;AACDqB,OAAGC,MAAH,CAAU6C,OAAV,CAAkBnE,UAAlB,EAA8BqB,GAAG+C,MAAjC,EAAyC,UAAUC,GAAV,EAAe1C,MAAf,EAAuB;AAC5D,YAAI0C,GAAJ,EAAS;AACL,gBAAIH,MAAJ,EAAY;AACRA,uBAAOG,GAAP;AACH;AACD;AACH;AACD1E,kBAAUE,UAAV,CAAqBG,UAArB,IAAmC;AAC/BA,wBAAYA,UADmB;AAE/B2B,oBAAQA,MAFuB;AAG/BxB,2BAAe,EAHgB;AAI/B6D,uBAAWA,aAAa,CAAC;AAJM,SAAnC;AAMA,YAAIC,SAAJ,EAAe;AACXA,sBAAUtC,MAAV;AACH;AACD2C,wBAAgBC,WAAhB;AACH,KAjBD;AAkBH,CA1BD;;AA4BAC,OAAOC,OAAP,GAAiB9E,SAAjB","file":"PrefabManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Script\\Tool\\System","sourcesContent":["/*global module, require, cc, client */\r\n/**\r\n * @desc 预制体加载管理模块\r\n * @author Administrator\r\n */\r\nvar outModule = {};\r\nvar local = {};\r\n\r\n//预制体缓存\r\n/**\r\n * {\r\n        prefabPath: prefabPath,\r\n        prefab: prefab,\r\n        prefabNodeArr: [],\r\n        frequency: frequency || -1 -1表示永远不会被清除\r\n    }\r\n */\r\noutModule.prefabSave = {};\r\n\r\n//初始化会加载的预制体\r\n/**\r\n * {\r\n *      pathStr: xxx\r\n *      frequency: xxx\r\n * }\r\n */\r\nconst PREFAB_INIT_LOAD_ARR = [\r\n\r\n];\r\n\r\n/**\r\n * 获取一个节点在prefabNodeArr的位置\r\n * @param {String} prefabPath \r\n * @param {cc.Node} node \r\n */\r\nlocal.getNodeIndexInPrefabNodeArr = (prefabPath, node) => {\r\n    if (!outModule.prefabSave[prefabPath]) {\r\n        return;\r\n    }\r\n    let len = outModule.prefabSave[prefabPath].prefabNodeArr.length, i;\r\n    for (i = 0; i < len; i++) {\r\n        if (outModule.prefabSave[prefabPath].prefabNodeArr[i] === node) {\r\n            return i;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * 根据一个依赖的路径来获取loadres需要使用的路径\r\n * @param {String} assetsPathStr \r\n */\r\nlocal.getLoadResPathStr = (assetsPathStr) => {\r\n    let splitArr;\r\n    splitArr = assetsPathStr.split('resources/');\r\n    if (splitArr.length < 2) {\r\n        return;\r\n    }\r\n    splitArr = splitArr[1].split('.');\r\n    return splitArr[0];\r\n};\r\n\r\n/**\r\n * 获取所有要清除的资源\r\n * @param {Array} clearArr \r\n */\r\nlocal.getAllClearDepends = (clearArr) => {\r\n    let allDepends = [];\r\n    clearArr.forEach((onePrefabData) => { \r\n        //先处理要release的图集\r\n        onePrefabData.prefabNodeArr.forEach((oneNode) => {\r\n            let pathArr = g_SpriteFrameManager.getAllUINodeUseSprite(oneNode);\r\n            pathArr.forEach((onePath) => {\r\n                let spriteDepends = cc.loader.getDependsRecursively(onePath);\r\n                spriteDepends.forEach((assetsPathStr) => {\r\n                    if (allDepends.indexOf(assetsPathStr) < 0) {\r\n                        allDepends.push(assetsPathStr);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        let depends = cc.loader.getDependsRecursively(onePrefabData.prefab);\r\n        depends.forEach((assetsPathStr) => {\r\n            if (allDepends.indexOf(assetsPathStr) < 0) {\r\n                allDepends.push(assetsPathStr);\r\n            }\r\n        });\r\n    });\r\n    return allDepends;\r\n};\r\n\r\n/**\r\n * 判断一个预制体是否可以被清理\r\n * @param {Object} prefabData \r\n * @param {Array} canNotClearPrefabDataArr 可以被清理的话应该是和这边的Depends数据没有冲突\r\n */\r\noutModule.judgeCanClearPrefab = (prefabData, canNotClearPrefabDataArr) => {\r\n    //先获取所有的依赖\r\n    let dependArr = [];\r\n    canNotClearPrefabDataArr.forEach((oneData) => {\r\n        let depends = cc.loader.getDependsRecursively(oneData.prefab);\r\n        depends.forEach((dependStr) => {\r\n            if (dependArr.indexOf(dependStr) < 0) {\r\n                dependArr.push(dependStr);\r\n            }\r\n        });\r\n    });\r\n    let depends = cc.loader.getDependsRecursively(prefabData.prefab);\r\n    let i, len = depends.length;\r\n    for (i = 0; i < len; i++) {\r\n        if (dependArr.indexOf(depends[i]) >= 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * 获取预制体\r\n * @param {String} prefabPath \r\n */\r\noutModule.getPrefab = (prefabPath) => {\r\n    return outModule.prefabSave[prefabPath].prefab;\r\n};\r\n\r\n//清除所有的预制体\r\n//没有绝对的把握不能使用，清除所有的依赖引用有可能会导致现有的其他界面出错\r\noutModule.clearAll = () => {\r\n    let key;\r\n    for (key in outModule.prefabSave) {\r\n        if (!outModule.prefabSave.hasOwnProperty(key)) {\r\n            return;\r\n        }\r\n        outModule.clearPrefab(key);\r\n    }\r\n    outModule.prefabSave = {};\r\n};\r\n\r\n//清除指定预制体\r\n//没有绝对的把握不能使用，清除所有的依赖引用有可能会导致现有的其他界面出错\r\n//这个函数不会清除动态加载的依赖\r\n/**\r\n * @param {Array} clearArr \r\n */\r\noutModule.clearPrefabWithoutUseSpreite = (clearArr) => {\r\n    //先把所有的节点都清除了\r\n    clearArr.forEach((onePrefabData) => {\r\n        onePrefabData.prefabNodeArr.forEach(function (node) {\r\n            node.destroy();\r\n            node._tj_isDestroy = true;\r\n        });\r\n    });\r\n    let allClearDepends = local.getAllClearDepends(clearArr);\r\n    let dependClearArr = [];\r\n    allClearDepends.forEach((assetsPathStr) => {\r\n        let loadResPathStr = local.getLoadResPathStr(assetsPathStr);\r\n        if (!loadResPathStr || !loadResPathStr.length) {\r\n            dependClearArr.push(assetsPathStr);\r\n            return;\r\n        }\r\n        let spriteUseNodeArr = g_SpriteFrameManager.spriteUseNodeObj[loadResPathStr];\r\n        if (!spriteUseNodeArr) {\r\n            dependClearArr.push(assetsPathStr);\r\n            return;\r\n        }\r\n        let i, len = spriteUseNodeArr.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (spriteUseNodeArr[i] && spriteUseNodeArr[i].isValid && !spriteUseNodeArr[i]._tj_isDestroy) {\r\n                return;\r\n            } else {\r\n                g_SpriteFrameManager.clearSprite(loadResPathStr);\r\n            }\r\n        }\r\n        dependClearArr.push(assetsPathStr);\r\n    });\r\n    cc.loader.release(dependClearArr);\r\n    clearArr.forEach((onePrefabData) => {\r\n        outModule.prefabSave[onePrefabData.prefabPath] = undefined;\r\n    });\r\n};\r\n\r\n//清除指定预制体\r\n//没有绝对的把握不能使用，清除所有的依赖引用有可能会导致现有的其他界面出错\r\n//这个函数不会清除动态加载的依赖\r\n/**\r\n * @param {Array} clearArr \r\n * @param {Array} canNotClearArr \r\n */\r\noutModule.clearPrefabInStrongMode = (clearArr, canNotClearArr) => {\r\n    //先获取现在显示的界面所有依赖的资源\r\n    let dependArr = [];\r\n    canNotClearArr.forEach((oneData) => {\r\n        let depends = cc.loader.getDependsRecursively(oneData.prefab);\r\n        depends.forEach((dependStr) => {\r\n            if (dependArr.indexOf(dependStr) < 0) {\r\n                dependArr.push(dependStr);\r\n            }\r\n        });\r\n    });\r\n    clearArr.forEach((onePrefabData) => {\r\n        onePrefabData.prefabNodeArr.forEach(function (node) {\r\n            node.destroy();\r\n            node._tj_isDestroy = true;\r\n        });\r\n    });\r\n    let allClearDepends = local.getAllClearDepends(clearArr);\r\n    let dependClearArr = [];\r\n    allClearDepends.forEach((assetsPathStr) => {\r\n        if (dependArr.indexOf(assetsPathStr) >= 0) {\r\n            return;\r\n        }\r\n        let loadResPathStr = local.getLoadResPathStr(assetsPathStr);\r\n        if (!loadResPathStr || !loadResPathStr.length) {\r\n            dependClearArr.push(assetsPathStr);\r\n            return;\r\n        }\r\n        let spriteUseNodeArr = g_SpriteFrameManager.spriteUseNodeObj[loadResPathStr];\r\n        if (!spriteUseNodeArr) {\r\n            dependClearArr.push(assetsPathStr);\r\n            return;\r\n        }\r\n        let i, len = spriteUseNodeArr.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (spriteUseNodeArr[i] && spriteUseNodeArr[i].isValid && !spriteUseNodeArr[i]._tj_isDestroy) {\r\n                return;\r\n            } else {\r\n                g_SpriteFrameManager.clearSprite(loadResPathStr);\r\n            }\r\n        }\r\n        dependClearArr.push(assetsPathStr);\r\n    });\r\n    cc.loader.release(dependClearArr);\r\n    clearArr.forEach((onePrefabData) => {\r\n        outModule.prefabSave[onePrefabData.prefabPath] = undefined;\r\n    });\r\n};\r\n\r\n//清除指定预制体\r\n//没有绝对的把握不能使用，清除所有的依赖引用有可能会导致现有的其他界面出错\r\n/**\r\n * @param {String} prefabPath \r\n */\r\noutModule.clearPrefab = (prefabPath) => {\r\n    if (!outModule.prefabSave[prefabPath]) {\r\n        return;\r\n    }\r\n    //清除节点\r\n    outModule.prefabSave[prefabPath].prefabNodeArr.forEach(function (node) {\r\n        node.destroy();\r\n        node._tj_isDestroy = true;\r\n    });\r\n    let depends = cc.loader.getDependsRecursively(outModule.prefabSave[prefabPath].prefab);\r\n    cc.loader.release(depends);\r\n    outModule.prefabSave[prefabPath] = undefined;\r\n};\r\n\r\n/**\r\n * 对指定的prefab增加一个node引用\r\n * @param {String} prefabPath \r\n * @param {cc.Node} node \r\n */\r\noutModule.addPrefabNode = (prefabPath, node) => {\r\n    if (!outModule.prefabSave[prefabPath]) {\r\n        return;\r\n    }\r\n    if (local.getNodeIndexInPrefabNodeArr(prefabPath, node) !== undefined) {\r\n        return;\r\n    }\r\n    outModule.prefabSave[prefabPath].prefabNodeArr.push(node);\r\n};\r\n\r\n/**\r\n * 加载初始化需要的预制体\r\n * PREFAB_INIT_LOAD_ARR所有这边标记的预制件都会被预先加载起来\r\n * @param {Function} finishCb\r\n */\r\noutModule.init = (finishCb) => {\r\n    var loadedCount = 0;\r\n    //处理加载选项数量为0的情况\r\n    if (loadedCount === PREFAB_INIT_LOAD_ARR.length) {\r\n        if (finishCb) {\r\n            finishCb();\r\n        }\r\n        return;\r\n    }\r\n    PREFAB_INIT_LOAD_ARR.forEach((pathData) => {\r\n        outModule.loadPrefab(pathData.pathStr, (prefab) => {\r\n            loadedCount++;\r\n            if (loadedCount === PREFAB_INIT_LOAD_ARR.length) {\r\n                if (finishCb) {\r\n                    finishCb();\r\n                }\r\n            }\r\n        }, (error) => {\r\n            g_LogTool.showLog(`PrefabManager init error! path is ${path}, error is ${error}`);\r\n            loadedCount++;\r\n            if (loadedCount === PREFAB_INIT_LOAD_ARR.length) {\r\n                if (finishCb) {\r\n                    finishCb();\r\n                }\r\n            }\r\n        }, pathData.frequency);\r\n    });\r\n};\r\n\r\n/**\r\n * 加载一个预制体\r\n * @param {String} prefabPath\r\n * @param {Function} successCb\r\n * @param {Function} failCb\r\n * @param {Number} frequency 使用频率，这个值越高的越不会再自动清理中被清除\r\n */\r\noutModule.loadPrefab = (prefabPath, successCb, failCb, frequency) => {\r\n    //看看是否有缓存\r\n    if (outModule.prefabSave[prefabPath]) {\r\n        if (successCb) {\r\n            successCb(outModule.prefabSave[prefabPath]);\r\n        }\r\n        return;\r\n    }\r\n    cc.loader.loadRes(prefabPath, cc.Prefab, function (err, prefab) {\r\n        if (err) {\r\n            if (failCb) {\r\n                failCb(err);\r\n            }\r\n            return;\r\n        }\r\n        outModule.prefabSave[prefabPath] = {\r\n            prefabPath: prefabPath,\r\n            prefab: prefab,\r\n            prefabNodeArr: [],\r\n            frequency: frequency || -1\r\n        };\r\n        if (successCb) {\r\n            successCb(prefab);\r\n        }\r\n        g_MemoryManager.memoryCheck();\r\n    });\r\n};\r\n\r\nmodule.exports = outModule;"]}