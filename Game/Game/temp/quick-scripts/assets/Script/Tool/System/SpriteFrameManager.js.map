{"version":3,"sources":["SpriteFrameManager.js"],"names":["outModule","local","spriteAtlasSave","spriteFrameSave","spriteUseNodeObj","SPRITE_FRAME_INIT_LOAD_ARR","getUINodeIndex","spritePath","UINode","i","len","length","getAllUINodeUseSprite","pathArr","key","hasOwnProperty","undefined","indexOf","push","clearSprite","path","forEach","oneObjData","deps","cc","loader","getDependsRecursively","useSprite","release","clearDestroyNode","array","newArray","nodeObj","isValid","_tj_isDestroy","setSpriteFrame","node","successCb","failCb","getComponent","Sprite","index","useNodeArr","loadSpriteFrame","spriteFrame","setSpriteFrameInAtlas","spriteAtlasPath","spriteName","loadSpriteAtlas","spriteAtlas","getSpriteFrame","init","finishCb","loadedCount","error","g_LogTool","showLog","loadRes","SpriteAtlas","SpriteFrame","module","exports"],"mappings":"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","file":"SpriteFrameManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Script\\Tool\\System","sourcesContent":["/*global module, require, cc, client */\r\n/**\r\n * @desc 图片加载模块\r\n * @author Administrator\r\n */\r\nvar outModule = {};\r\nvar local = {};\r\nvar spriteAtlasSave = {};\r\nvar spriteFrameSave = {};\r\n\r\n//记录一个动态加载的图集或者图片\r\n//用path作为key\r\n//value是一个Obj数据\r\n/**\r\n * UINode: 是一个存储UI节点的列表，如果这个UI节点内部有不能移除的prefab，那么这个资源再自动清除的时候不能被删除\r\n * useSprite: 释放的时候每个节点都需要释放SpriteFrame/SpriteAtlas资源和Texture2D资源\r\n * useNodeArr: 释放的时候每个节点的SpriteFrame设置为undefined\r\n */\r\noutModule.spriteUseNodeObj = {};\r\n\r\nconst SPRITE_FRAME_INIT_LOAD_ARR = [\r\n\r\n];\r\n\r\n/**\r\n * 获取UINode所处的index\r\n * @param {String} spritePath\r\n * @param {cc.Node} UINode \r\n */\r\nlocal.getUINodeIndex = (spritePath, UINode) => {\r\n    if (!outModule.spriteUseNodeObj[spritePath]) {\r\n        return;\r\n    }\r\n    let i, len = outModule.spriteUseNodeObj[spritePath].length;\r\n    for (i = 0; i < len; i++) {\r\n        if (outModule.spriteUseNodeObj[spritePath][i].UINode === UINode) {\r\n            return i;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * 获取一个UINode所有运用的图集，返回一个路径的合集\r\n * @param {cc.Node} path \r\n */\r\noutModule.getAllUINodeUseSprite = (UINode) => {\r\n    let pathArr = [];\r\n    for (var key in outModule.spriteUseNodeObj) {\r\n        if (!outModule.spriteUseNodeObj.hasOwnProperty(key)) {\r\n            return;\r\n        }\r\n        if (local.getUINodeIndex(key, UINode) !== undefined) {\r\n            if (pathArr.indexOf(key) < 0) {\r\n                pathArr.push(key);\r\n            }\r\n        }\r\n    }\r\n    return pathArr;\r\n};\r\n\r\n/**\r\n * 清除缓存\r\n * @param {String} path \r\n * 会清除所有的useSprite的资源依赖\r\n */\r\noutModule.clearSprite = (path) => {\r\n    if (outModule.spriteUseNodeObj[path]) {\r\n        outModule.spriteUseNodeObj[path].forEach((oneObjData) => {\r\n            //oneObjData.useNodeArr.forEach((oneNode) => {\r\n            //    oneNode.getComponent(cc.Sprite).SpriteFrame = undefined;\r\n            //});\r\n            let deps = cc.loader.getDependsRecursively(oneObjData.useSprite);\r\n            cc.loader.release(deps);\r\n        });\r\n    }\r\n    if (spriteAtlasSave[path]) {\r\n        spriteAtlasSave[path] = undefined;\r\n    }\r\n    if (spriteFrameSave[path]) {\r\n        spriteFrameSave[path] = undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * 清除被删除的节点\r\n */\r\noutModule.clearDestroyNode = () => {\r\n    for (var key in outModule.spriteUseNodeObj) {\r\n        if (!outModule.spriteUseNodeObj.hasOwnProperty(key)) {\r\n            return;\r\n        }\r\n        let array = outModule.spriteUseNodeObj[key];\r\n        let newArray = [];\r\n        array.forEach((nodeObj) => {\r\n            if (nodeObj.UINode && nodeObj.UINode.isValid && !nodeObj.UINode._tj_isDestroy) {\r\n                newArray.push(nodeObj);\r\n            }\r\n        });\r\n        outModule.spriteUseNodeObj[key] = newArray;\r\n    }\r\n};\r\n\r\n/**\r\n * 设置图片，因为图集走的是动态加载，所以你不知道什么时候会有用\r\n * @param {cc.Node} UINode node节点归属的UI节点，传入的原因是为了标记这个资源被这个UI界面动态使用过一次\r\n * @param {cc.Node} node 设置图片的节点\r\n * @param {String} spritePath 图片的路径\r\n * @param {Function} successCb\r\n * @param {Function} failCb\r\n */\r\noutModule.setSpriteFrame = (UINode, node, spritePath, successCb, failCb) => {\r\n    if (!node.getComponent(cc.Sprite)) {\r\n        return;\r\n    }\r\n    if (!outModule.spriteUseNodeObj[spritePath]) {\r\n        outModule.spriteUseNodeObj[spritePath] = [];\r\n    }\r\n    let index = local.getUINodeIndex(spritePath, UINode);\r\n    if (index === undefined) {\r\n        outModule.spriteUseNodeObj[spritePath].push({\r\n            UINode: UINode,\r\n            useSprite: undefined,\r\n            useNodeArr: []\r\n        });\r\n        index = outModule.spriteUseNodeObj[spritePath].length - 1;\r\n    }\r\n    if (!spriteFrameSave[spritePath]) {\r\n        //动态加载\r\n        outModule.loadSpriteFrame(spritePath, (spriteFrame) => {\r\n            node.getComponent(cc.Sprite).spriteFrame = spriteFrame;\r\n            outModule.spriteUseNodeObj[spritePath][index].useSprite = spriteFrame;\r\n            if (outModule.spriteUseNodeObj[spritePath][index].useNodeArr.indexOf(node) < 0) {\r\n                outModule.spriteUseNodeObj[spritePath][index].useNodeArr.push(node);\r\n            }\r\n            if (successCb) {\r\n                successCb();\r\n            }\r\n        }, () => {\r\n            if (failCb) {\r\n                successCb();\r\n            }\r\n        });\r\n        return;\r\n    }\r\n    node.getComponent(cc.Sprite).spriteFrame = spriteFrameSave[spritePath];\r\n    outModule.spriteUseNodeObj[spritePath][index].useSprite = spriteFrameSave[spritePath];\r\n    if (outModule.spriteUseNodeObj[spritePath][index].useNodeArr.indexOf(node) < 0) {\r\n        outModule.spriteUseNodeObj[spritePath][index].useNodeArr.push(node);\r\n    }\r\n    if (successCb) {\r\n        successCb();\r\n    }\r\n};\r\n\r\n/**\r\n * 设置图集中的一张图片，因为图集走的是动态加载，所以你不知道什么时候会有用\r\n * @param {cc.Node} UINode node节点归属的UI节点，传入的原因是为了标记这个资源被这个UI界面动态使用过一次\r\n * @param {cc.Node} node 设置图集的节点\r\n * @param {String} spriteAtlasPath 图集的路径\r\n * @param {String} spriteName 图片的名字\r\n * @param {Function} successCb\r\n * @param {Function} failCb\r\n */\r\noutModule.setSpriteFrameInAtlas = (UINode, node, spriteAtlasPath, spriteName, successCb, failCb) => {\r\n    if (!node.getComponent(cc.Sprite)) {\r\n        return;\r\n    }\r\n    if (!outModule.spriteUseNodeObj[spriteAtlasPath]) {\r\n        outModule.spriteUseNodeObj[spriteAtlasPath] = [];\r\n    }\r\n    let index = local.getUINodeIndex(spriteAtlasPath, UINode);\r\n    if (index === undefined) {\r\n        outModule.spriteUseNodeObj[spriteAtlasPath].push({\r\n            UINode: UINode,\r\n            useSprite: undefined,\r\n            useNodeArr: []\r\n        });\r\n        index = outModule.spriteUseNodeObj[spriteAtlasPath].length - 1;\r\n    }\r\n    if (!spriteAtlasSave[spriteAtlasPath]) {\r\n        //动态加载\r\n        outModule.loadSpriteAtlas(spriteAtlasPath, (spriteAtlas) => {\r\n            node.getComponent(cc.Sprite).spriteFrame = spriteAtlas.getSpriteFrame(spriteName);\r\n            outModule.spriteUseNodeObj[spriteAtlasPath][index].useSprite = spriteAtlas;\r\n            if (outModule.spriteUseNodeObj[spriteAtlasPath][index].useNodeArr.indexOf(node) < 0) {\r\n                outModule.spriteUseNodeObj[spriteAtlasPath][index].useNodeArr.push(node);\r\n            }\r\n            if (successCb) {\r\n                successCb();\r\n            }\r\n        }, () => {\r\n            if (failCb) {\r\n                failCb();\r\n            }\r\n        });\r\n        return;\r\n    }\r\n    node.getComponent(cc.Sprite).spriteFrame = spriteAtlasSave[spriteAtlasPath].getSpriteFrame(spriteName);\r\n    outModule.spriteUseNodeObj[spriteAtlasPath][index].useSprite = spriteAtlasSave[spriteAtlasPath];\r\n    if (outModule.spriteUseNodeObj[spriteAtlasPath][index].useNodeArr.indexOf(node) < 0) {\r\n        outModule.spriteUseNodeObj[spriteAtlasPath][index].useNodeArr.push(node);\r\n    }\r\n    if (successCb) {\r\n        successCb();\r\n    }\r\n};\r\n\r\n/**\r\n * 初始化函数，会预先吧SPRITE_FRAME_INIT_LOAD_ARR下的图集全部加载起来\r\n * @param {Function} finishCb \r\n */\r\noutModule.init = (finishCb) => {\r\n    let loadedCount = 0;\r\n    //处理加载选项数量为0的情况\r\n    if (loadedCount === SPRITE_FRAME_INIT_LOAD_ARR.length) {\r\n        if (finishCb) {\r\n            finishCb();\r\n        }\r\n        return;\r\n    }\r\n    SPRITE_FRAME_INIT_LOAD_ARR.forEach((path) => {\r\n        outModule.loadSpriteAtlas(path, (spriteAtlas) => {\r\n            loadedCount++;\r\n            if (loadedCount === SPRITE_FRAME_INIT_LOAD_ARR.length) {\r\n                if (finishCb) {\r\n                    finishCb();\r\n                }\r\n            }\r\n        }, (error) => {\r\n            g_LogTool.showLog(`SpriteFrameManager init error! path is ${path}, error is ${error}`);\r\n            loadedCount++;\r\n            if (loadedCount === SPRITE_FRAME_INIT_LOAD_ARR.length) {\r\n                if (finishCb) {\r\n                    finishCb();\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * 动态加载一个图集\r\n * @param {String} path \r\n * @param {Function} successCb \r\n * @param {Function} failCb \r\n */\r\noutModule.loadSpriteAtlas = (path, successCb, failCb) => {\r\n    if (!path) {\r\n        return;\r\n    }\r\n    if (spriteAtlasSave[path]) {\r\n        if (successCb) {\r\n            successCb(spriteAtlasSave[path]);\r\n        }\r\n        return;\r\n    }\r\n    cc.loader.loadRes(path, cc.SpriteAtlas, function (error, spriteAtlas) {\r\n        if (error) {\r\n            if (failCb) {\r\n                failCb(error);\r\n            }\r\n            return;\r\n        }\r\n        spriteAtlasSave[path] = spriteAtlas;\r\n        if (successCb) {\r\n            successCb(spriteAtlas);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 动态加载一个图片\r\n * @param {String} path \r\n * @param {Function} successCb \r\n * @param {Function} failCb \r\n */\r\noutModule.loadSpriteFrame = (path, successCb, failCb) => {\r\n    if (!path) {\r\n        return;\r\n    }\r\n    if (spriteFrameSave[path]) {\r\n        if (successCb) {\r\n            successCb(spriteFrameSave[path]);\r\n        }\r\n        return;\r\n    }\r\n    cc.loader.loadRes(path, cc.SpriteFrame, function (error, spriteFrame) {\r\n        if (error) {\r\n            if (failCb) {\r\n                failCb(error);\r\n            }\r\n            return;\r\n        }\r\n        spriteFrameSave[path] = spriteFrame;\r\n        if (successCb) {\r\n            successCb(spriteFrame);\r\n        }\r\n    });\r\n};\r\n\r\nmodule.exports = outModule;\r\n\r\n"]}